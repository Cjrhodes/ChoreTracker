import { useEffect, useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Sparkles, GripVertical, Clock, Trophy, Plus } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { apiRequest, queryClient } from '@/lib/queryClient';
import type { AiSuggestion, Child } from '@shared/schema';

interface AutoSuggestionsProps {
  childId: string;
  kind: 'task' | 'learning_goal' | 'exercise';
  children: Child[];
}

export function AutoSuggestions({ childId, kind, children }: AutoSuggestionsProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const { toast } = useToast();

  // Fetch existing suggestions
  const { data: suggestions = [], isLoading } = useQuery<AiSuggestion[]>({
    queryKey: ['/api/ai/suggestions', childId, kind],
    queryFn: () => apiRequest('GET', `/api/ai/suggestions?childId=${childId}&status=new`).then(res => res.json()),
    enabled: !!childId,
  });

  const filteredSuggestions = suggestions.filter((s: AiSuggestion) => 
    s.kind === kind && s.status === 'new'
  ).slice(0, 3);

  // Auto-generate suggestions on mount if none exist
  const generateMutation = useMutation({
    mutationFn: async () => {
      return apiRequest('POST', '/api/ai/suggestions', {
        childId,
        kinds: [kind],
        params: { count: 3 }
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/ai/suggestions'] });
      setHasAutoGenerated(true);
    },
    onError: (error) => {
      console.error('Error generating suggestions:', error);
    },
  });

  // Auto-generate on mount if no suggestions exist
  useEffect(() => {
    if (!isLoading && !hasAutoGenerated && filteredSuggestions.length === 0 && childId) {
      setIsGenerating(true);
      generateMutation.mutate();
      const timer = setTimeout(() => setIsGenerating(false), 1000);
      return () => clearTimeout(timer);
    }
  }, [isLoading, filteredSuggestions.length, childId, hasAutoGenerated]);

  // Assign to child mutation
  const assignMutation = useMutation({
    mutationFn: async ({ suggestionId, targetChildId }: { suggestionId: string; targetChildId: string }) => {
      return apiRequest('POST', `/api/ai/suggestions/${suggestionId}/assign`, { childId: targetChildId });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/ai/suggestions'] });
      queryClient.invalidateQueries({ queryKey: ['/api/chore-templates'] });
      queryClient.invalidateQueries({ queryKey: ['/api/learning/goals'] });
      toast({
        title: "Task Assigned! âœ…",
        description: "The task has been assigned to the family member.",
      });
    },
    onError: () => {
      toast({
        title: "Assignment Failed",
        description: "Couldn't assign the task. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleDragStart = (e: React.DragEvent, suggestion: AiSuggestion) => {
    e.dataTransfer.effectAllowed = 'copy';
    e.dataTransfer.setData('application/json', JSON.stringify({
      suggestionId: suggestion.id,
      kind: suggestion.kind,
      payload: suggestion.payload
    }));
  };

  const getKindColor = () => {
    switch (kind) {
      case 'task': return 'bg-amber-50 border-amber-200';
      case 'learning_goal': return 'bg-purple-50 border-purple-200';
      case 'exercise': return 'bg-green-50 border-green-200';
      default: return 'bg-gray-50 border-gray-200';
    }
  };

  if (isLoading || isGenerating) {
    return (
      <div className="space-y-2">
        {[1, 2, 3].map((i) => (
          <div key={i} className="p-2 bg-muted/30 rounded-lg animate-pulse h-16" />
        ))}
      </div>
    );
  }

  if (filteredSuggestions.length === 0) {
    return (
      <div className="text-center py-4 text-xs text-muted-foreground">
        <Sparkles className="w-6 h-6 mx-auto mb-1 opacity-50" />
        <p>Generating suggestions...</p>
      </div>
    );
  }

  return (
    <div className="space-y-2">
      {filteredSuggestions.map((suggestion: AiSuggestion) => {
        const payload = suggestion.payload as any;
        return (
          <div
            key={suggestion.id}
            draggable
            onDragStart={(e) => handleDragStart(e, suggestion)}
            className={`p-2 rounded-lg border ${getKindColor()} cursor-move hover:shadow-md transition-shadow`}
            data-testid={`suggestion-${suggestion.id}`}
          >
            <div className="flex items-start gap-2">
              <GripVertical className="w-4 h-4 text-muted-foreground mt-0.5 flex-shrink-0" />
              <div className="flex-1 min-w-0">
                <div className="text-sm font-medium truncate">
                  {payload.subject || payload.title || 'Task'}
                </div>
                <div className="flex items-center gap-2 mt-1">
                  <div className="flex items-center gap-1 text-xs text-muted-foreground">
                    <Clock className="w-3 h-3" />
                    {payload.estimatedTime || payload.duration || 15}m
                  </div>
                  <div className="flex items-center gap-1 text-xs text-primary">
                    <Trophy className="w-3 h-3" />
                    {payload.pointsReward || payload.pointValue || payload.pointsPerUnit || 20}pts
                  </div>
                </div>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
}
